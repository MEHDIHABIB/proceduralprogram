// Procedural Method

PROCEDURE dot_product(var v1 , v2 : ARRAY_OF INTEGER ; var ps : INTEGER)
VAR
    i : INTEGER
BEGIN
i := 0 ;
ps := 0 ;
IF (v1.length <> v2 lenght) THEN
    Write("We cannot calculate ps because vectors with different size")
END_IF

WHILE (i < v1.length) DO
    ps := ps + (v1[i] * v2[i])
    i++
END_WHILE

END

ALGORITHM ort_vectors
VAR
    v1 , v2 : ARRAY_OF INTEGER ;
    n1 , n2 : INTEGER ;
    ps : INTEGER ;
BEGIN
    n1 := read_size() ;
    read_array (n1 , v1) ;

    n2 := read_size();
    read_array (n2 , v2) ;

    dot_product(v1 , v2 , ps)
    IF (ps = 0) THEN
        Write("v1 and v2 are orthogonal")

        ELSE
        Write("v1 and v2 are not orthogonal")
    END_IF


END

// Functional Method

FUNCTION dot-pr0duct(var v1 , v2 : ARRAY_OF INTEGER) : INTEGER
VAR
    i , ps : INTEGER ;

BEGIN
    i := 0 ;
    ps := 0 ;
    IF (v1.length <> v2.length) THEN
    Write("we cannot calculate ps product / vectors different size")
    END_IF
    WHILE (i <v1.length) DO
        ps := ps + (v1[i] * v2[i]) ;
        i++ ;
    END_WHILE

    RETURN ps ;

END